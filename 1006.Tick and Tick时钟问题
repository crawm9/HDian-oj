Problem Description
The three hands of the clock are rotating every second and meeting each other many times everyday. Finally, they get bored of this and each of them would like to stay away from the other two. A hand is happy if it is at least D degrees from any of the rest. You are to calculate how much time in a day that all the hands are happy.
 

Input
The input contains many test cases. Each of them has a single line with a real number D between 0 and 120, inclusively. The input is terminated with a D of -1.
 

Output
For each D, print in a single line the percentage of time in a day that all of the hands are happy, accurate up to 3 decimal places.
 

Sample Input
0
120
90
-1
 

Sample Output
100.000
0.000
6.251
//该题的秒数不一定是整数，如果每秒的去列举，精度会不够，如果划分更小精度如0.1秒去列举运行时间又会超过，且每时每刻三根钟都在转动
//应该每分钟的去列举时钟与分钟、时钟与秒钟，分钟与秒钟的情况，再找出符合条件的区间，最后会得到三个区间
//(aUb)∩(cUd)∩(e∪f)可以化为：(a∩c∩e)∪(b∩e∩c)∪(a∩e∩d)∪(b∩e∩d)∪(a∩f∩c)∪(b∩f∩c)∪(a∩f∩d)∪(b∩f∩d)
//code
#include<stdio.h>
double D;
typedef struct{
    double left;
    double right;
}Interval;
Interval set1(double speed,double angle);
Interval set2(double speed,double angle);
Interval cross(Interval a,Interval b);
int main()
{
    int i, j, k,count = 0;
    int hour, minute;
    double second,speed, angle;
    double total;
    double saveres[1000];
    Interval te;
    Interval temp[3][2];

    while(scanf("%lf",&D) != EOF)
    {
        total = 0;
        if(D == -1) break;
        for(hour = 0; hour < 12; hour++)
        {
            for(minute = 0; minute < 60; minute++)
            {
                //时钟&分钟
                speed =  11.0 / 120;
                angle = 30 * hour - 5.5 * minute;
                temp[0][0] = set1(speed,angle);
                temp[0][1] = set2(speed,angle);
                //时钟&秒钟
                speed = 719.0 / 120;
                angle = 30 * hour + 0.5 * minute;
                temp[1][0] = set1(speed,angle);
                temp[1][1] = set2(speed,angle);
                //分钟&秒钟
                speed = 5.9;
                angle = 6 * minute;
                temp[2][0] = set1(speed,angle);
                temp[2][1] = set2(speed,angle);
                for(i = 0; i < 2; i ++)
                    for(j = 0;j < 2; j++)
                        for(k = 0; k < 2; k++)
                        {
                            te  = cross(cross(temp[0][i],temp[1][j]),temp[2][k]);
                            total += te.right - te.left;
                        }
            }
        }
        saveres[count++] = total / 432.0;
    } 
    for(i = 0 ; i< count; i++)
        printf("%.3lf\n",saveres[i]);
    getchar();
    getchar();
    return 0;
}

Interval set1(double speed,double angle)
{
    double left, right;
    Interval ex;
    left = (angle + D - 360) / speed;
    right = (angle - D) / speed;
    if(left < 0) left = 0.0;
    if(right > 60) right = 60.0;
    if(left > right) left = right = 0.0;
    ex.left = left;ex.right = right;
    return ex;
}
Interval set2(double speed,double angle)
{
    double left, right;
    Interval ex;
    left = (angle + D) / speed;
    right = (angle - D + 360) / speed;
    if(left > right) left = right = 0.0;
    if(left < 0) left = 0.0;
    if(right > 60) right = 60.0;
    ex.left = left;ex.right = right;
    return ex;
}
Interval cross(Interval a,Interval b)
{
    Interval ex;
    ex.left = a.left > b.left ? a.left : b.left;
    ex.right = a.right < b.right ? a.right : b.right;
    if(ex.left > ex.right)  ex.left = ex.right = 0.0;
    return ex;
}
//精度不够的代码
#include<stdio.h>
#define SIZE (360 * 720)
int jud(long,long,long,long);
void change(long*,long*);
int main()
{
    long i, j, k = 0,d;
    int find;
    double count = 0;
    long sec = 0,min = 0,hour = 0;
    double num[1000];
    while(scanf("%ld",&d),d != -1)
    {
        count  = 0;
        for(i = 0; i < SIZE; i++)
        {
            hour += 1;
            min += 12;
            sec += 720;
            if(i == 0)
                hour = min = sec = 0;
            if(min == SIZE)
                min = 0;
            if(sec == SIZE)
                sec = 0;
            find = jud(hour,min,sec,d * 720);
            if(find) count++;
        }
        num[k++] = count / (36 * 72);
    }
    for(j = 0; j < k; j++)
        printf("%lf\n",num[j]);
    getchar();
    getchar();
    return 0;
}
int jud(long a, long b, long c,long d)
{
    change(&a,&b);
    change(&a,&c);
    change(&b,&c);
    if(a - b >= d && b - c >= d && c + SIZE >= a + d)
        return 1;
    return 0;
}
void change(long *x,long*y)
{
    int temp;
    if(*x < *y)
    {
        temp = *x;
        *x = *y;
        *y = temp;
    }
}
