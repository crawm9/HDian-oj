Problem Description
Given a sequence a[1],a[2],a[3]......a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.
 

Input
The first line of the input contains an integer T(1<=T<=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1<=N<=100000), then N integers followed(all the integers are between -1000 and 1000).
 

Output
For each test case, you should output two lines. The first line is "Case #:", # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.
 

Sample Input
2
5 6 -1 5 4 -7
7 0 6 -1 1 -6 7 -5
 

Sample Output
Case 1:
14 1 4

Case 2:
7 1 6
//比较重要的是求最大子序列和，以及记录起与结束的位置
//code
#include<stdio.h>
#define LEN 100000
typedef struct sum{
    int maxsum;
    int start;
    int end;
}Sum;
void maxsum(int * nums,int lenth,Sum * reslt);
int main()
{
    int i, j, n;
    int nums[21][LEN];
    int k[21];
    Sum reslt[21];
    scanf("%d",&n);
    for(i = 1; i <= n; i++)
    {
        scanf("%d",&k[i]);
        for(j = 1; j <= k[i]; j++)
        scanf("%d",&nums[i][j]);
    }
    for(i = 1; i <= n; i++)
    maxsum(nums[i],k[i],&reslt[i]);
    for(i = 1; i <= n; i++)
    {
        if(i > 1)
            printf("\n");
        printf("Case %d:\n",i);
        printf("%d %d %d\n",reslt[i].maxsum,reslt[i].start,reslt[i].end);
    }
    return 0;
}
void maxsum(int * nums,int lenth,Sum * res)
{
    int i, j = 1, k, m, n;
    int sum = 0,max = nums[1] - 1;
    for(i = 1; i <= lenth; i++)//求最大子序列和
    {
        sum += nums[i];
        if(sum > max)
        {
            m = j;
            max = sum;
            n = i;
        }
        if(sum < 0)
        {
            sum = 0;
            j = i + 1;
        }
    }
    res->maxsum = max;
    res->start = m;
    res->end = n;
}
